@startuml
'https://plantuml.com/sequence-diagram
' -----------------------------------------
' Maintenance
' -----------------------------------------

entity operations {
id: int autoincrement
--
type: varchar(28)
op_user: varchar(100)
op_order: int
content: varchar
--
unique (type, op_order)
}

' -----------------------------------------
' Repository
' -----------------------------------------
entity epics {
id: int autoincrement
--
name: str
project_id: str
--
unique (name, project_id)
}

entity features {
id: int autoincrement
--
epic_id: int <<FK>>
name: str
description: text
filename: text
tags: text
project_id: str
--
unique (filename, project_id)
FK epic_id: epics.id
}

entity scenarios {
id: int autoincrement
--
scenario_id: text
feature_id: int <<FK>
name: text
description: text
steps: text
tags: text
isoutline: boolean
--
unique (scenario_id, feature_id, project_id)
FK feature_id: features.id
}

' one epic per feature, zero more features per epic
epics ||--o{ features
' one feature per scenario_internal_id, zero more scenarios per feature
features ||--o{ scenarios

' -----------------------------------------
' Campaigns
' -----------------------------------------

entity campaigns {
id: int autoincrement
--
project_id: text
version: text
occurrence: int
description: text
status: text
--
unique (project_id, version, occurrence)
}

' link between campaign and ticket
entity campaign_tickets{
id: autoincrement
---
campaign_id: int FK
ticket_reference: text
ticket_id: int
---
unique(campaign_id, ticket_reference)
FK campaign_id: campaigns.id
FK ticket_id: tickets.id
}

' link between campaign-ticket and scenario
entity campaign_ticket_scenarios {
id: int autoincrement
--
campaign_ticket_id: int FK
scenario_id: int FK
status: str
--
unique (campaign_ticket_id, scenario_id)
FK campaign_ticket_id: campaign_tickets.id
FK scenario_id: scenarios.id
}
campaign_tickets ||--|| campaigns
campaign_ticket_scenarios ||--|| campaign_tickets
campaign_ticket_scenarios ||--|| scenarios

' -----------------------------------------
' Test result
' -----------------------------------------

entity test_scenario_results {
id: int autoincrement
--
run_date: datetime
project_id: text
version: text
campaign_id: int
epic_id: int
feature_id: int
scenario_id: int
status: text
is_partial: boolean
--
FK campaign_id: campaigns.id
FK epic_id: epics.id
FK feature_id: features.id
FK scenario_id: scenarios.id
}
test_scenario_results }o--|| scenarios
test_scenario_results }o--|| epics
test_scenario_results }o--|| features

entity test_feature_results {
id: int autoincrement
--
run_date: datetime
project_id: text
version: text
campaign_id: int
epic_id: int
feature_id: int
status: text
is_partial: boolean
--
FK campaign_id: campaigns.id
FK epic_id: epics.id
FK feature_id: features.id
}

test_feature_results }o--|| epics
test_feature_results }o--|| features

entity test_epic_results {
id: int autoincrement
--
run_date: datetime
project_id: text
version: text
campaign_id: int
epic_id: int
status: text
is_partial: boolean
--
FK campaign_id: campaigns.id
FK epic_id: epics.id
}
test_epic_results }o--|| epics

' -----------------------------------------
' Project
' -----------------------------------------

entity projects {
id: int autoincrement
name: string unique
alias: string
}

entity versions {
id: int autoincrement
---
project_id: int
version: string
created: datetime
updated: datetime
started: datetime
end_forecast: datetime
status: varchar(50)
open: int=0
cancelled: int=0
blocked: int=0
in_progress: int=0
done: int=0
open_blocking: int=0
open_major: int=0
open_minor: int=0
closed_blocking: int=0
closed_major: int=0
closed_minor: int=0
---
FK project_id: projects.id
unique(project_id, version)
}

entity tickets {
id: int autoincrement
---
reference: str
description: str
status: TicketStatusEnum
created: datetime
updated: datetime
current_version: str
past_version: List[str]
delivery_date: datetime
project_id: int
---
FK project_id: projects.id
FK current_version: versions.version
}

entity bugs {
id: int autoincrement
---
title: str
url: str | None
description: str
project_id: int
version_id: str
fix_version_id: str
status: BugStatusEnum
created: datetime
updated: datetime
---
FK project_id: projects.id
unique(project_id, version_id, reference)
}

entity bugs_issues {
id: int autoincrement
---
bug_id: int FK
occurrence: int
ticket_reference: str
scenario_id: int
---
FK bug_id: bugs.id
' Managing as light relationship
'FK campaign_ticket_scenario_id: campaign_ticket_scenarios.id
}

' one bug to many issues, one issue to many bugs
bugs ||--|| bugs_issues

projects ||--o{ versions
versions ||--o{ tickets
tickets ||--|| campaign_tickets

' -----------------------------------------
' Users
' -----------------------------------------
entity users{
id: int autoincrement
---
username: str
password: str
scopes: str
---
unique(username)
}
@enduml